{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","loadUserActions","payload","type","initialState","todos","user","store","createStore","state","action","composeWithDevTools","getTodosSelector","getUserSelector","getUserIdSelector","id","CurrentUser","dispatch","useDispatch","useSelector","className","name","email","phone","onClick","url","getTodos","a","fetch","json","getUser","userId","TodoList","useState","inputValue","setInputValue","filterBy","setFilterBy","selectedUserId","handleSelectUser","userFromServer","visibleTodos","filter","todo","title","includes","completed","useEffect","loadTodos","todosFromServer","placeholder","value","onChange","event","target","map","classNames","htmlFor","readOnly","checked","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8aa99408.chunk.js","sourcesContent":["export const LOAD_TODOS = 'LOAD_TODOS';\nexport const LOAD_USER = 'LOAD_USER';\nexport const CLEAR_USER = 'CLEAR_USER';\n\nexport const loadTodosActions = (payload: Todo[]) => ({\n  type: LOAD_TODOS,\n  payload,\n});\n\nexport const loadUserActions = (payload: User | null) => ({\n  type: LOAD_USER,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { LOAD_TODOS, LOAD_USER } from './actions';\n\nconst initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: [...action.payload],\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","export const getTodosSelector = (state: State) => state.todos;\nexport const getUserSelector = (state: State) => state.user;\nexport const getUserIdSelector = (state: State) => state.user?.id;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserActions } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(getUserSelector);\n\n  return (\n    <>\n      {user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button\n            className=\"button CurrentUser__clear\"\n            type=\"button\"\n            onClick={() => dispatch(loadUserActions(null))}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","const url = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const todos = await fetch(`${url}/todos`);\n\n  return todos.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const user = await fetch(`${url}/users/${userId}`);\n\n  return user.json();\n}\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, getUser } from '../../api';\nimport { loadTodosActions, loadUserActions } from '../../store/actions';\nimport { getTodosSelector, getUserIdSelector } from '../../store/selectors';\nimport './TodoList.scss';\n\nexport const TodoList: React.FC = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [filterBy, setFilterBy] = useState('all');\n\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodosSelector);\n  const selectedUserId = useSelector(getUserIdSelector);\n\n  const handleSelectUser = async (userId: number) => {\n    const userFromServer = await getUser(userId);\n\n    dispatch(loadUserActions(userFromServer));\n  };\n\n  const filteredTodos = todos.filter(todo => todo.title.includes(inputValue));\n\n  const visibleTodos = filteredTodos.filter(todo => {\n    switch (filterBy) {\n      case 'not completed':\n        return !todo.completed;\n\n      case 'completed':\n        return todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(loadTodosActions(todosFromServer));\n    };\n\n    loadTodos();\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n      <div className=\"field\">\n        <label className=\"label\">Filter by title</label>\n        <div className=\"control\">\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"Text input\"\n            value={inputValue}\n            onChange={(event) => setInputValue(event.target.value)}\n          />\n        </div>\n      </div>\n\n      <div className=\"select\">\n        <select\n          onChange={(event) => setFilterBy(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"not completed\">Not completed</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                },\n              )}\n            >\n              <label htmlFor={`${todo.id}`}>\n                <input\n                  id={`${todo.id}`}\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'TodoList__user-button',\n                  'button',\n                  { 'TodoList__user-button--selected': selectedUserId === todo.userId },\n                )}\n                type=\"button\"\n                onClick={() => selectedUserId !== todo.userId && handleSelectUser(todo.userId)}\n              >\n                {`User #${todo.userId}`}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList/index';\nimport { getUserSelector } from './store/selectors';\n\nconst App = () => {\n  const user = useSelector(getUserSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {user ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}